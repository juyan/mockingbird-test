//
//  MiddleMocks.generated.swift
//  Middle
//
//  Generated by Mockingbird v0.19.0.
//  DO NOT EDIT
//

@testable import Middle
@testable import Mockingbird
import Base
import Foundation
import Swift

private let genericStaticMockContext = Mockingbird.GenericStaticMockContext()

// MARK: - Mocked MiddleClass
public final class MiddleClassMock: Middle.MiddleClass, Mockingbird.Mock {
  typealias MockingbirdSupertype = Middle.MiddleClass
  static let staticMock = Mockingbird.StaticMock()
  public let mockingbirdContext = Mockingbird.Context(["generator_version": "0.19.0", "module_name": "Middle"])

  public enum InitializerProxy {
    public static func initialize(__file: StaticString = #file, __line: UInt = #line) -> MiddleClassMock {
      let mock: MiddleClassMock = MiddleClassMock()
      mock.mockingbirdContext.sourceLocation = SourceLocation(__file, __line)
      return mock
    }
  }

  // MARK: Mocked `getMiddleVersion`()
  public override func `getMiddleVersion`() -> Int {
    return self.mockingbirdContext.mocking.didInvoke(Mockingbird.SwiftInvocation(selectorName: "`getMiddleVersion`() -> Int", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier((Int).self))) {
      self.mockingbirdContext.recordInvocation($0)
      let mkbImpl = self.mockingbirdContext.stubbing.implementation(for: $0)
      if let mkbImpl = mkbImpl as? () -> Int { return mkbImpl() }
      for mkbTargetBox in self.mockingbirdContext.proxy.targets(for: $0) {
        switch mkbTargetBox.target {
        case .super:
          return super.`getMiddleVersion`()
        case .object(let mkbObject):
          guard var mkbObject = mkbObject as? MockingbirdSupertype else { break }
          let mkbValue: Int = mkbObject.`getMiddleVersion`()
          self.mockingbirdContext.proxy.updateTarget(&mkbObject, in: mkbTargetBox)
          return mkbValue
        }
      }
      if let mkbValue = self.mockingbirdContext.stubbing.defaultValueProvider.value.provideValue(for: (Int).self) { return mkbValue }
      self.mockingbirdContext.stubbing.failTest(for: $0, at: self.mockingbirdContext.sourceLocation)
    }
  }

  public func `getMiddleVersion`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Int, Int> {
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Int, Int>(mock: self, invocation: Mockingbird.SwiftInvocation(selectorName: "`getMiddleVersion`() -> Int", selectorType: Mockingbird.SelectorType.method, arguments: [], returnType: Swift.ObjectIdentifier((Int).self)))
  }

  // MARK: Mocked init()
  public required override init()  {
    super.init()
  }
}

/// Returns an abstract mock which should be initialized using `mock(MiddleClass.self).initialize(â€¦)`.
public func mock(_ type: Middle.MiddleClass.Type, file: StaticString = #file, line: UInt = #line) -> MiddleClassMock.InitializerProxy.Type {
  return MiddleClassMock.InitializerProxy.self
}
